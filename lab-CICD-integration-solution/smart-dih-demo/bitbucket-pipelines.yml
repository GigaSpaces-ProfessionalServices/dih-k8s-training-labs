# This is an example Starter pipeline configuration
# Use a skeleton to build, test and deploy using manual and parallel steps
# -----
# You can specify a custom docker image from Docker Hub as your build environment.

image: niharkapadia/pipelines-kubectl:latest

pipelines:
  default:
    - parallel:
      # The following deployment steps will be executed for each pipeline run. To configure your steps and conditionally deploy see https://support.atlassian.com/bitbucket-cloud/docs/configure-bitbucket-pipelinesyml/
    - step:
        name: Deploy DIH to Kubernetes ..
        deployment: test
        script:
          - mvn clean package -DskipTests
          - aws configure set aws_access_key_id $AWS_ACCESS_KEY --profile default && aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY --profile default && aws configure set region "us-east-2" --profile default && aws configure set output "json" --profile default
          - aws s3 cp --acl public-read-write target/smart-dih-demo-0.1.jar s3://aa-nihar-test/Bitbucket-demo/
          #- echo "K8s version= "+ $KUBE_VERSION
          - cd /root/
          - tar -zxvf helm-v3.5.1-linux-amd64.tar.gz
          - mv linux-amd64/helm /usr/local/bin/helm
          - aws eks update-kubeconfig --region us-east-2 --name smart-dih-lab
          #- export KUBECONFIG=/root/kubeconfig-eks-gigaspaces-use-east-2.yaml
          - helm repo add gigaspaces https://resources.gigaspaces.com/helm-charts
          - helm repo update
          - helm install manager gigaspaces/xap-manager --version 16.0
          - helm install demo gigaspaces/xap-pu --version 16.0 --set manager.name=manager,partitions=2
          - helm install feeder gigaspaces/xap-pu --version 16.0 --set manager.name=manager,resourceUrl="https://aa-nihar-test.s3.us-east-2.amazonaws.com/Bitbucket-demo/smart-dih-demo-0.1.jar"
          #- kubectl config set-cluster kubernetes --certificate-authority=ca.crt --server=$K8s_SERVER_URL
          #- kubectl config set-credentials $K8s_USERNAME --token=$K8s_USER_TOKEN
          #- kubectl config set-context aws --cluster=kubernetes --namespace=$K8s_NAMESPACE --user=$K8s_USERNAME
          #- kubectl config use-context aws --user=$K8s_USERNAME
          #- kubectl set image deployment/$K8s_DEPLOYMENT_NAME $K8s_DEPLOYMENT_NAME=$DOCKER_ECR_REPO_URL/$DOCKER_IMAGE_NAME:${BITBUCKET_COMMIT} --user=$K8s_USERNAME --local=false      -
